// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Unit tests for the HSL color space
 *
 * Copyright (C) 2023 Authors
 *
 * Released under GNU GPL v2+, read the file 'COPYING' for more information.
 */

#include "spaces-testbase.h"

namespace {

using Space::Type::HSL;
using Space::Type::RGB;

// clang-format off
INSTANTIATE_TEST_SUITE_P(ColorsSpacesHsl, fromString, testing::Values(
    _P(in, "hsl(80, 1, 0.5)",             { 0.222, 1,     0.5         }, 0xaaff00ff),
    _P(in, "hsl(360,0.5,0)",              { 1.0,   0.5,   0           }, 0x000000ff),
    _P(in, "hsl(180deg, 100%, 50%)",      { 0.5,   1,     0.5         }, 0x00ffffff),
    _P(in, "hsl(0.5turn 100% 50%)",       { 0.5,   1,     0.5         }, 0x00ffffff),
    _P(in, "   hsl(20,   1,   0.5)",      { 0.055, 1,     0.5         }, 0xff5500ff),
    _P(in, "hsl(50%, 100%, 50% / 50%)",   { 0.5,   1,     0.5,   0.5  }, 0x00ffff80),
    _P(in, "hsla(30, 0, 0.5, 0.5)",       { 0.083, 0,     0.5,   0.5  }, 0x80808080)
));

INSTANTIATE_TEST_SUITE_P(ColorsSpacesHsl, badColorString, testing::Values(
    "hsl", "hsl(", "hsl(360,"
));

INSTANTIATE_TEST_SUITE_P(ColorsSpacesHsl, toString, testing::Values(
    _P(out, HSL, { 0.333, 0.2,   0.8         }, "hsl(119, 0.2, 0.8)"),
    _P(out, HSL, { 0.333, 0.8,   0.258       }, "hsl(119, 0.8, 0.258)"),
    _P(out, HSL, { 1.0,   0.5,   0.004       }, "hsl(360, 0.5, 0.004)"),
    _P(out, HSL, { 0,     1,     0.2,   0.8  }, "hsla(0, 1, 0.2, 0.8)", true),
    _P(out, HSL, { 0,     1,     0.2,   0.8  }, "hsl(0, 1, 0.2)", false)
));

INSTANTIATE_TEST_SUITE_P(ColorsSpacesHsl, convertColorSpace, testing::Values(
    // 20 random tests generated by python3 colorsys.hls_to_rgb()
    _P(inb, HSL, {0.248, 0.225, 0.453}, RGB, {0.455, 0.554, 0.351}),
    _P(inb, HSL, {0.257, 0.011, 0.403}, RGB, {0.403, 0.407, 0.399}, false),
    // XXX     GOT {0.250, 0.001, 0.403} in inverse (RGB to HSL)
    _P(inb, HSL, {0.415, 0.514, 0.565}, RGB, {0.341, 0.789, 0.561}),
    _P(inb, HSL, {0.528, 0.949, 0.408}, RGB, {0.021, 0.664, 0.795}),
    _P(inb, HSL, {0.182, 0.455, 0.152}, RGB, {0.209, 0.222, 0.083}),
    _P(inb, HSL, {0.334, 0.320, 0.265}, RGB, {0.181, 0.350, 0.181}),
    _P(inb, HSL, {0.942, 0.401, 0.881}, RGB, {0.929, 0.833, 0.866}),
    _P(inb, HSL, {0.845, 0.925, 0.707}, RGB, {0.978, 0.436, 0.942}),
    _P(inb, HSL, {0.889, 0.190, 0.973}, RGB, {0.978, 0.968, 0.974}, false),
    // XXX     GOT {0.900, 0.185, 0.973} in inverse (RGB to HSL)
    _P(inb, HSL, {0.182, 0.870, 0.172}, RGB, {0.295, 0.322, 0.022}),
    _P(inb, HSL, {0.474, 0.305, 0.388}, RGB, {0.270, 0.507, 0.470}),
    _P(inb, HSL, {0.070, 0.507, 0.513}, RGB, {0.760, 0.474, 0.266}),
    _P(inb, HSL, {0.087, 0.713, 0.089}, RGB, {0.153, 0.092, 0.026}),
    _P(inb, HSL, {0.537, 0.286, 0.749}, RGB, {0.677, 0.789, 0.821}),
    _P(inb, HSL, {0.314, 0.688, 0.858}, RGB, {0.783, 0.956, 0.761}),
    _P(inb, HSL, {0.385, 0.802, 0.797}, RGB, {0.634, 0.960, 0.736}),
    _P(inb, HSL, {0.544, 0.265, 0.126}, RGB, {0.093, 0.142, 0.160}),
    _P(inb, HSL, {0.793, 0.659, 0.998}, RGB, {0.999, 0.997, 0.999}, false),
    // XXX     GOT {0.833, 0.500, 0.998} in inverse (RGB to HSL)
    _P(inb, HSL, {0.884, 0.984, 0.538}, RGB, {0.993, 0.084, 0.719}),
    _P(inb, HSL, {0.730, 0.175, 0.475}, RGB, {0.455, 0.392, 0.558}),

    // No conversion
    _P(inb, HSL, {1.000, 0.400, 0.200}, HSL, {1.000, 0.400, 0.200})
));

INSTANTIATE_TEST_SUITE_P(ColorsSpacesHsl, normalize, testing::Values(
    // Note HSL is special in that it's hue component is radial so -0.2 == +0.8
    _P(inb, HSL, { 0.5,   0.5,   0.5,   0.5  }, HSL, { 0.5,   0.5,   0.5,   0.5  }),
    _P(inb, HSL, { 1.2,   1.2,   1.2,   1.2  }, HSL, { 0.2,   1.0,   1.0,   1.0  }),
    _P(inb, HSL, {-0.2,  -0.2,  -0.2,  -0.2  }, HSL, { 0.8,   0.0,   0.0,   0.0  }),
    _P(inb, HSL, { 0.0,   0.0,   0.0,   0.0  }, HSL, { 0.0,   0.0,   0.0,   0.0  }),
    _P(inb, HSL, { 1.0,   1.0,   1.0,   1.0  }, HSL, { 1.0,   1.0,   1.0,   1.0  })
));
// clang-format on

TEST(ColorsSpacesHsl, randomConversion)
{
    EXPECT_TRUE(RandomPassthrough(HSL, RGB, 1000));
}

TEST(ColorsSpacesHsl, components)
{
    auto c = Manager::get().find(HSL)->getComponents();
    ASSERT_EQ(c.size(), 3);
    ASSERT_EQ(c[0].id, "h");
    ASSERT_EQ(c[1].id, "s");
    ASSERT_EQ(c[2].id, "l");
}

} // namespace

/*
  Local Variables:
  mode:c++
  c-file-style:"stroustrup"
  c-file-offsets:((innamespace . 0)(inline-open . 0))
  indent-tabs-mode:nil
  fill-column:99
  End:
*/
// vim: expandtab:shiftwidth=4:tabstop=8:softtabstop=4 :
